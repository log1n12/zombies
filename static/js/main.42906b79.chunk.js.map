{"version":3,"sources":["component/card/card.component.jsx","component/card-list/card-list.component.jsx","component/searchbox/searchbox.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","zombi1","name","email","CardList","zombies","map","zomb","id","SearchBox","placeholder","handleChange","type","onChange","App","handleChage","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredZombies","filter","zombie","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mSAGaA,EAAO,SAACC,GACjB,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,WAAWC,IAAG,yCAAoCH,EAAMI,OAAOC,KAAjD,oDACvB,6BAAKL,EAAMI,OAAOC,OAClB,4BAAG,gCAAQL,EAAMI,OAAOE,cCJvBC,G,MAAW,SAACP,GACrB,OACI,qBAAKC,UAAU,YAAf,SACKD,EAAMQ,QAAQC,KAAI,SAAAC,GAAI,OACnB,cAAC,EAAD,CAAoBN,OAAQM,GAAjBA,EAAKC,WCNnBC,EAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACrC,OACI,8BACI,uBACIC,KAAK,SACLF,YAAaA,EACbG,SAAUF,OCgCXG,G,wDAlCb,aAAe,IAAD,8BACZ,gBAcFC,YAAc,SAACC,GACb,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAbtC,EAAKC,MAAQ,CACXhB,QAAS,GACTa,YAAa,IALH,E,qDASd,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEZ,QAASqB,S,oBAO5C,WAAU,IAAD,EAC0BC,KAAKN,MAA9BhB,EADD,EACCA,QAASa,EADV,EACUA,YACXU,EAAkBvB,EAAQwB,QAAO,SAAAC,GAAM,OAAIA,EAAO5B,KAAK6B,cAAcC,SAASd,EAAYa,kBAChG,OACE,sBAAKjC,UAAU,MAAf,UACE,iDACA,cAAC,EAAD,CACEY,YAAY,qBACZC,aAAcgB,KAAKZ,cAErB,cAAC,EAAD,CAAUV,QAASuB,W,GA9BTK,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.42906b79.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.style.css';\r\n\r\nexport const Card = (props) => {\r\n    return (\r\n        <div className=\"card-container\">\r\n            <img alt=\"monsters\" src={`http://tinygraphs.com/isogrids/${props.zombi1.name}?theme=daisygarden&numcolors=4&size=50&fmt=svg`}></img>\r\n            <h1>{props.zombi1.name}</h1>\r\n            <p><small>{props.zombi1.email}</small></p>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { Card } from '../card/card.component';\r\nimport './card-list.style.css';\r\n\r\nexport const CardList = (props) => {\r\n    return (\r\n        <div className=\"card-list\">\r\n            {props.zombies.map(zomb =>\r\n                <Card key={zomb.id} zombi1={zomb} />\r\n            )}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => {\r\n    return (\r\n        <div>\r\n            <input\r\n                type=\"search\"\r\n                placeholder={placeholder}\r\n                onChange={handleChange}\r\n            />\r\n        </div>\r\n    )\r\n}","import React, { Component } from 'react';\nimport { CardList } from './component/card-list/card-list.component';\nimport { SearchBox } from './component/searchbox/searchbox.component';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      zombies: [],\n      searchField: \"\"\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({ zombies: users }))\n  }\n\n  handleChage = (e) => {\n    this.setState({ searchField: e.target.value })\n  }\n\n  render() {\n    const { zombies, searchField } = this.state;\n    const filteredZombies = zombies.filter(zombie => zombie.name.toLowerCase().includes(searchField.toLowerCase()));\n    return (\n      <div className=\"App\">\n        <h1> Zombies Rawr! </h1>\n        <SearchBox\n          placeholder=\"search wow zombies\"\n          handleChange={this.handleChage}\n        />\n        <CardList zombies={filteredZombies} />\n      </div>\n    )\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}